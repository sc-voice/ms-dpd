#!/usr/bin/bash
DBNAME=dpd.db
SCRIPT=`basename $0`
DIRNAME=`dirname $0`

if [[ ! -e "local/$DBNAME" ]]; then
  echo "$SCRIPT: [ERROR] missing $DBNAME"
  echo "$SCRIPT: [ERROR] run scripts/dpd-install"
  exit -1
fi;

# sqlite3 --batch local/dpd.db ".mode json" "select lookup_key,headwords,roots,deconstructor,variant,spelling,grammar,help,abbrev,epd,other,sinhala,devanagari,thai from lookup where lookup_key=\"$1\" limit 1"  | json

# sqlite3 --batch local/dpd.db ".mode json" "select lookup_key,headwords,grammar from lookup where lookup_key=\"$1\" limit 1"  | json

node - <<'JS' $DIRNAME $SCRIPT $*
const util = require('util');
const exec = util.promisify(require('child_process').exec);
let [ NODE, DASH, DIRNAME, SCRIPT, ...args] = process.argv;

const RE_RU = /.*[бвгджзклмнпрстфхцчшщёиыэюяйъь].*/;

function help() {
  console.error(`
NAME
  scripts/sql-lookup - lookup given words in DPD database

SYNOPSIS
  scripts/sql-lookup [OPTIONS] WORDS

DESCRIPTION
  Search DPD lookup table in Sqlite3 database,
  converting the result to JSON.

  -?, --help
    print this help text

  -ab, --abbreviations
    list abbreviations

  -ac, --all-columns
    print all table columns (Default is lookup_key, headwords, grammar)

  -v, --verbose
    print more information to stderr

  WORDS
    one or more Pali words (e.g., "dhamma"). A single asterisk ("*")
    is a wildcard for ALL Pali words.

EXAMPLES
  scripts/sql-lookup -ac dhamma devi
`);
  process.exit(0);
}

(async function() {
  const msg = `${SCRIPT}:`;
  let dbg = 0;
  let abbrev = false;
  let limit = 1;
  let columns = [
    'lookup_key', 'headwords', 'grammar', 'abbrev', 'deconstructor',
  ];
  let words = args.reduce((a,arg,i)=>{
    switch (arg) {
      case '-?':
      case '--help':
        help();
        break;
      case "--abbreviations":
      case "-ab":
        abbrev = true;
        break;
      case "--all-columns":
      case "-ac":
        columns = ['*'];
        break;
      case "--verbose":
      case "-v":
        dbg = true;
        break;
      default:
        if (arg.at(0) === "-") {
          console.error(`${msg} [ERROR] ignoring ${arg}`);
        } else {
          a.push(arg);
        }
        break;
    }
    return a;
  }, []);
  if (words.length===0 && !abbrev) {
    help();
  }
  let sqlWords = words.map(word=>`"${word}"`).join(",");
  let sqlWhere = '';
  if (sqlWords.length) {
    sqlWhere += (sqlWhere ? ' and ' : 'where ') + 
      `lookup_key in (${sqlWords})`
  }
  if (abbrev) {
    sqlWhere += (sqlWhere ? ' and ' : 'where ') + 
      'not abbrev = ""';
  }
  let sqlLimit = abbrev
    ? ''
    : `limit ${sqlWords.length}`;
  let cmd = [
    'sqlite3 --batch local/dpd.db',
    '".mode json"',
    `'select ${columns.join(',')}`,
    ` from lookup`,
    sqlWhere,
    sqlLimit,
    "'",
    '| json',
  ].join(' ');
  dbg && console.error(msg, {NODE,DASH, DIRNAME, SCRIPT, words});
  dbg && console.error(msg, cmd);
  let {stdout, stderr} = await exec(cmd);
  if (stdout) {
    try {
      let json = JSON.parse(stdout);
      dbg && console.error(msg, json);
      let rows = json.map(row=>{
        let {lookup_key, headwords, grammar, abbrev} = row;
        headwords = headwords && JSON.parse(headwords) || [];
        abbrev = abbrev && JSON.parse(abbrev);
        grammar = grammar && JSON.parse(grammar);
        return Object.assign({}, row, {headwords, grammar, abbrev});
      });
      let rowFilter = abbrev && (row=>{
        let { lookup_key, } = row;
        return !RE_RU.test(lookup_key);
      });
      if (rowFilter) {
        rows = rows.filter(rowFilter);
      }
      console.log('[');
      for (let i=0; i<rows.length-1; i++) {
        console.log(rows[i], ',');
      }
      console.log(rows.at(-1));
      console.log(']');
    } catch(e) {
      console.error(msg, stdout, e);
    }
  } else {
    console.log('[]');
  }

})()
JS
