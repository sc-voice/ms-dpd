#!/usr/bin/bash
DBNAME=dpd.db
SCRIPT=`basename $0`
DIRNAME=`dirname $0`
DPDDB='local/dpd.db'

if [[ ! -e "local/$DBNAME" ]]; then
  echo "$SCRIPT: [ERROR] missing $DBNAME"
  echo "$SCRIPT: [ERROR] run scripts/dpd-install"
  exit -1
fi;

node - <<'JS' $DIRNAME $SCRIPT $*
const fs = require('fs');
const fsp = fs.promises;
const path = require('path');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
let [ NODE, DASH, DIRNAME, SCRIPT, ...args] = process.argv;

const msg = `${SCRIPT}:`;
const MIN_ARGS = 0;
const VERBOSE_ROWS = 3;
const LOCAL=path.join(DIRNAME, '../local');
const WORDS_PATH = path.join(LOCAL, 'words');

function help() {
  console.log(`
NAME
  pli-words - list Pali words in ebt-data/root/pli/ms 

SYNOPSIS
  pli-words [OPTIONS]

DESCRIPTION
  Count occurrences of unique Pali words in ebt-data/root/pli
  subfolders, writing the resulting JSON map to a file
  (default local/words/ms.json)

  -?, --help
    print this help text

  -sd, --sub-directory DIR
    subdirectory of "root/pli". (default "ms")

  -v, --verbose
    print more information to stderr

  -vr, --verbose-rows
    number of rows of verbose information for tabular data.
    (Default: ${VERBOSE_ROWS})

  -vv, --very-verbose
    print even more information to stderr

EXAMPLES
  scripts/pli-words -?
`);
  process.exit(0);
}

function parseArgs() {
  const msg = `${SCRIPT}.parseArgs()`;
  let dbg = 0;
  let subDir = 'ms';
  let verboseRows = VERBOSE_ROWS;
  if (args.length < MIN_ARGS) {
    help();
  }
  let argTexts = args.reduce((a,arg,i)=>{
    switch (arg) {
      case '-?':
      case '--help':
        help();
        break;
      case "--sub-directory":
      case "-sd":
        subDir = args[++i];
        break;
      case "--verbose":
      case "-v":
        dbg = 1;
        break;
      case "--verbose-rows":
      case "-vr":
        verboseRows = Number(args[++i]);
        dbg = dbg || 1;
        break;
      case "--very-verbose":
      case "-vv":
        dbg = 2;
        break;
      default:
        if (arg.at(0) === "-") {
          console.log(`${msg} [ERROR] ignoring ${arg}`);
        } else {
          a.push(arg);
        }
        break;
    }
    return a;
  }, []);
  let parms = { 
    dbg, 
    argTexts,
    subDir,
    verboseRows,
  };
  dbg && console.log(msg, 
    Object.assign({ NODE,DASH, DIRNAME, SCRIPT}, parms));

  return parms;
}
var { 
  dbg,
  argTexts,
  subDir,
  verboseRows,
} = parseArgs();

async function loadEbtData(fEbtData) {
  const msg = `${SCRIPT}.loadEbtData()`;

  let exists = false;
  try {
    await fsp.access(fEbtData);
    dbg && console.log(msg, '[1]ok', fEbtData);
    exists = true;
  } catch(e) {
    if (e.code !== 'ENOENT') {
      dbg && console.log(msg, '[2]err', e, fEbtData);
      throw e;
    }
  }

  try {
    let cmd = exists
      ? `cd ${fEbtData}; git pull`
      : `git clone https://github.com/ebt-site/ebt-data ${fEbtData}`;
    console.log(msg, '[3]pull', cmd);
    let { stdout, stderr } = await exec(cmd);
    dbg && console.log(msg, '[4]ok', stdout);
  } catch(e) {
    let { stdout, stderr } = e;
    dbg && console.log(msg, '[5]err', e, {stdout, stderr});
    throw e;
  }
}

async function ebtWords() {
  const msg = `${SCRIPT}.ebtWords()`;
  const fEbtData = path.join(LOCAL, '../local/ebt-data');
  const Pali = (await import(`${DIRNAME}/../src/pali.mjs`)).default;
  await loadEbtData(fEbtData);
  let pliDir = path.join(fEbtData, 'root/pli', subDir);
  let jsonFiles = (await jsonPaths(pliDir))
    .filter(d=>d.name.endsWith('.json'));
  let wordMap = {};
  console.log(msg, '[1]jsonFiles', jsonFiles.length);
  for (let i=0; i<jsonFiles.length; i++) {
    let d = jsonFiles[i];
    let fpath = `${d.path}/${d.name}`;
    let buf = await fsp.readFile(fpath);
    let doc = JSON.parse(buf);
    let keys = Object.keys(doc);
    keys.forEach(key=>{
      let text = doc[key]
        .toLowerCase()
        .replace(/<.?b>/g, ' ')
        .replace(
          /[- ,."'()\[\]:;!?0-9‘’“”–…—]+/g,
          ' ')
        .trim();
      if (text) {
        let words = text.split(' ');
        words.forEach(word=>{
          if (wordMap[word]) {
            wordMap[word]++;
          } else {
            wordMap[word] = 1;
          }
        });
      }
    });
  }
  let words = Object.keys(wordMap);
  words = words.sort((a,b)=>{
    return wordMap[b]-wordMap[a] || Pali.compareRoman(a,b);
  });
  wordMap = words.reduce((a,w)=>{
    a[w] = wordMap[w];
    return a;
  },{});
  //words = words.sort(Pali.compareRoman);
  dbg && console.log(msg, '[2]words', words.length,
    words.slice(0,verboseRows));

  return { wordMap, words };
}

async function jsonPaths(dir) {
  const msg = `${SCRIPT}.readDir()`;
  let files = await fsp.readdir(dir, {
    recursive:true,
    withFileTypes:true,
  });
  files = files.filter(f=>{
    return f.name.endsWith('.json') && !/xplayground/.test(f.name);
  });
  dbg && console.log(msg, '[1]files', files.length);
  return files;
}

async function main() {
  const msg = `${SCRIPT}.main:`;

  let { wordMap:wmEbt, words:wEbt } = await ebtWords();
  if (fs.existsSync(WORDS_PATH)) {
    dbg>1 && console.error(msg, '[1]ok', WORDS_PATH);
  } else {
    await fsp.mkdir(WORDS_PATH);
    dbg>1 && console.error(msg, '[2]mkdir', WORDS_PATH);
  }
  let wordsFile = path.join(WORDS_PATH, 
    `${subDir.replaceAll('/','-')}.json`);
  let json = JSON.stringify(wmEbt,null,1);
  await fsp.writeFile(wordsFile, json);
  console.log(msg, '[3]wordsFile', wordsFile, '=>', 
    `${json.length} chars`);
}

try { 
  main();
} catch(e) { 
  console.error(msg, e); 
}
JS
