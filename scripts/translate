
#!/usr/bin/bash
SCRIPT=`basename $0`
DIRNAME=`dirname $0`

node - <<'JS' $DIRNAME $SCRIPT $*
const util = require('util');
const exec = util.promisify(require('child_process').exec);
let [ NODE, DASH, DIRNAME, SCRIPT, ...args] = process.argv;

const msg = `${SCRIPT}:`;

function help() {
  console.error(`
NAME
  ${SCRIPT} - Translated dictionary headwords in given sutta

SYNOPSIS
  ${SCRIPT} [OPTIONS] SUTTA_REFS...

DESCRIPTION
  Translate the MS-DPD definitions of all the Pali words in the segments
  specified by the given sutta references (e.g., "mn8", "mn8:1.1").

  -?, --help
    print this help text

  -l, --lang LANG
    Two letter language code (required)

  -v, --verbose
    print more information to stderr

EXAMPLES
  scripts/${SCRIPT} -l fr mn8:1.1
`);
  process.exit(0);
}

let dbg = 0;
let dstLang;
let srefs = [];
let SuttaRef;
let SuidMap;
let Translator;

async function translateSuttaRef(sref) {
  const msg = `${SCRIPT}.translateSuttaRef:`;
  let dbg = 1;
  let { sutta_uid } = sref;
  let trans = await Translator.create({dstLang});
  let defPath = trans.definitionPath();
  let srefShort = sref.toString().replace('/pli/ms','');
  dbg && console.log(msg, srefShort, defPath);
  let translatedDefs = await trans.translateSuttaRef(sref);
  let { charCount, dstDefs } = trans;
  Object.assign(dstDefs, translatedDefs);
  await trans.writeDefinitions(defPath, dstDefs);
  dbg && console.log(msg, JSON.stringify(translatedDefs, null, 2));
  console.log(msg, '[1]translated', srefShort, 
    `(${trans.charCount} chars)`);
}

async function main() {
  let srefs = [];
  let SCV_ESM = await import('scv-esm/main.mjs');
  SuttaRef = SCV_ESM.SuttaRef;
  SuidMap = SCV_ESM.SuidMap;
  let TRANSLATOR = await import('./scripts/js/translator.mjs');
  Translator = TRANSLATOR.Translator;

  for (let i = 0; i < args.length; i++) {
    let arg = args[i];
    switch (arg) {
      case '-?':
      case '--help':
        help();
        break;
      case "--lang":
      case "-l":
        dstLang = args[++i];
        break;
      case "--verbose":
      case "-v":
        dbg = 1;
        break;
      default:
        if (arg.at(0) === "-") {
          console.error(`${msg} [ERROR] ignoring ${arg}`);
        } else {
          let sref = SuttaRef.create(arg);
          srefs.push(sref);
        }
        break;
    }
  }
  if (srefs.length === 0) {
    help();
  }

  dbg && console.error(msg, {
    //NODE,DASH, 
    DIRNAME, SCRIPT, srefs, dstLang, verbose:dbg,
  });

  for (let i = 0; i < srefs.length; i++) {
    let sref = srefs[i];
    await translateSuttaRef(sref);
  }
}
(async function() {
  try {
    main()
  } catch(e) {
    console.error(msg, e);
  }
})()

JS
