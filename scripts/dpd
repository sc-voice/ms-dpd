#!/bin/bash
SCRIPT=$0
DIRNAME=`dirname $SCRIPT`
node - <<'JS' $DIRNAME "$@"
let [ SCRIPT, DASH, DIRNAME, ...args] = process.argv;
const msg = `${SCRIPT}:`;

function help() {
  console.log(`
NAME
        dpd - search Digital Pali Dictionary

SYNOPSIS
        dpd [OPTIONS] PATTERN

DESCRIPTION
        Searches Digital Pali Dictionary using following methods:
        * entries by Pali word
        * entries by matching unaccented Pali word(s)
        * entries by matching definitions

    -?, --help
        Print this help.

    -hy, --hyphenate WORD
        Hyphenate given word

    -hr, --hide-meaning_raw, --hide-raw
        Hide unreviewed meanings (false)

    -l, --language LANG_CODE
        Write out definition is given language specified by 
        2-letter LANG_CODE (en)

    -ol, --output-long 
        Write out all available fields (KEY, WORD, PAT, POS, STEM, 
        CONSTRUCT, MEANING)

    -md
        Use "definition" search method to show matching definitions

    -me
        Use "entry" search method to show definitions for given 
        Pāli word.

    -mu
        Use "unaccented" search method to show definitions for all Pāli 
        words matching unaccented letters with or without diacriticals

    -v, --verbose
        Verbose output

EXAMPLES
        dpd dhamma
        dpd -mu dhamma
        dpd -md 'superior virtue'
  `);
  process.exit(0);
}
async function main() {
  const msg = 'dpd.main()';
  const path = (await import('path'));
  const util = require('util');
  const exec = util.promisify(require('child_process').exec);
  const { DBG } = (await import(
    `${DIRNAME}/../src/defines.mjs`));
  const { default:Dictionary } = (await import(
    `${DIRNAME}/../src/dictionary.mjs`));
  const { default:HeadwordKey } = (await import(
    `${DIRNAME}/../src/headword-key.mjs`));

  let method; // default
  let textArgs = [];
  let outLong = false;
  let lang = 'en';
  let hyphenateWord;
  let verbose = false;
  let showMeaningRaw = true;
  let dbg = DBG.DPD;
  for (let i=0; i<args.length; i++) {
    let arg = args[i];
    let argNext = args[i+1];
    dbg && console.log(msg, '[1]arg', i, arg);
    if (arg.startsWith('-')) {
      switch (arg) {
        case '-hy':
        case '--hyphenate':
          hyphenateWord = argNext;
          i++;
          break;
        case '-ol':
          outLong = true;
          break;
        case '-l':
        case '--language':
          lang = argNext;
          dbg && console.error(msg, '[1]lang', lang);
          i++;
          break;
        case '-hr':
        case '--hide-raw':
          showMeaningRaw = false;
          dbg & console.error(msg, '[2]showMeaningRaw', showMeaningRaw);
          break;
        case '-me':
          method = 'entry';
          break;
        case '-mu':
          method = 'unaccented';
          break;
        case '-md':
          method = 'definition';
          break;
        case '-v':
        case '--verbose':
          verbose = true;
          dbg = 1;
          break;
        case '-?':
        case '--help':
          help();
          break;
      }
    } else {
      textArgs.push(arg);
    }
  }
  if (!hyphenateWord && textArgs.length==0) {
    help();
  }

  if (textArgs.length > 1) {
    if (!method || method==='definition') {
      method = 'definition'
      textArgs = [ textArgs.join(' ') ];
    }
  }
  let dict = await Dictionary.create({lang, showMeaningRaw});

  if (hyphenateWord) {
    console.log(dict.hyphenate(hyphenateWord));
    return;
  }

  for (let i=0; i<textArgs.length; i++) {
    let word = textArgs[i];
    let info = dict.find(word, {method});
    if (info == null) {
      console.log(`${word} (not found)`);
      let words = dict.wordsWithPrefix(word);
      words.forEach(word=>{
        console.log(`  ${word}?`);
      });
      return;
    }
    dbg && console.log(msg, '[1]info', info);
    let { method:methodActual, pattern, data } = info;
    let license = ' CC0 https://digitalpalidictionary.github.io/';
    let title = ` find:"${word}" method:${methodActual}`
    console.log("".padEnd(title.length+1, "-"));
    console.log(title);
    console.log("".padEnd(title.length+1, "-"));
    let T_CONSTR = outLong ? 'CONSTRUCTION' : 'CNSTR';
    let T_HWID = outLong ? 'HEADWORD' : 'HWID';
    let T_KEY = 'KEY';
    let T_PATTERN = outLong ? 'PATTERN' : 'PAT';
    let T_POS = 'POS';
    let T_STEM = 'STEM';
    let T_MEANING ='MEANING';
    let T_WORD = outLong ? 'LEMMA_1' : 'LEMMA';
    let constrPad = T_CONSTR.length;
    let keyPad = T_KEY.length;
    let hwidPad = T_HWID.length;
    let patternPad = T_PATTERN.length;
    let posPad = T_POS.length;
    let stemPad = T_STEM.length;
    let wordPad = T_WORD.length;
    let rows = data.map(row=>{
      let { 
        key='', lemma_1='', meaning='', meaning_lit='', 
        construction='', pos='', pattern='', stem='', 
      } = row;
      let hwid = HeadwordKey.toNumber(key)+'';
      wordPad = Math.max(wordPad, lemma_1.length);
      posPad = Math.max(posPad, pos.length);
      constrPad = Math.max(constrPad, construction.length);
      keyPad = Math.max(keyPad, key.length);
      hwidPad = Math.max(hwidPad, hwid.length);
      patternPad = Math.max(patternPad, pattern.length);
      posPad = Math.max(posPad, pos.length);
      stemPad = Math.max(stemPad, stem.length);
      let constParts = construction.split('\n');
      if (constParts.length>1) {
        construction = JSON.stringify(construction);
      }

      return [
        key, lemma_1, pos, meaning, meaning_lit, 
        construction, pattern, stem, hwid
      ];
    });
    let titles = [ '#'.padStart(2), ];
    outLong && titles.push(T_KEY.padEnd(keyPad));
    outLong && titles.push(T_HWID.padEnd(hwidPad));
    titles.push(T_WORD.padEnd(wordPad));
    titles.push(T_PATTERN.padEnd(patternPad));
    outLong && titles.push(T_POS.padEnd(posPad));
    outLong && titles.push(T_STEM.padEnd(stemPad));
    outLong && titles.push(T_CONSTR.padEnd(constrPad));
    titles.push(T_MEANING);
    console.log.apply(console, titles);
    rows.sort((a,b)=>a[1].localeCompare(b[1]));
    rows.forEach((row,i)=>{
      let [ 
        key, lemma_1, pos, meaning, meaning_lit, 
        construction, pattern, stem, hwid
      ] = row;
      let cols = [ `${i+1}`.padStart(2) ];
      outLong && cols.push(key.padEnd(keyPad));
      outLong && cols.push(hwid.padEnd(hwidPad));
      cols.push(lemma_1.padEnd(wordPad));
      cols.push(pattern.padEnd(patternPad));
      outLong && cols.push(pos.padEnd(posPad));
      outLong && cols.push(stem.padEnd(stemPad));
      outLong && cols.push(construction.padEnd(constrPad));
      cols.push(meaning_lit 
        ? `${meaning}; lit. ${meaning_lit}` 
        : meaning);
      console.log.apply(console, cols);
    });
  }
} //main
main();
JS
